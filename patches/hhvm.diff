diff --git a/hphp/runtime/ext/std/ext_std_misc.cpp b/hphp/runtime/ext/std/ext_std_misc.cpp
index 6e94fa9..26a8a35 100644
--- a/hphp/runtime/ext/std/ext_std_misc.cpp
+++ b/hphp/runtime/ext/std/ext_std_misc.cpp
@@ -37,6 +37,8 @@
 #include "hphp/util/logger.h"
 #include <sys/param.h> // MAXPATHLEN is here
 
+#include <time.h>
+
 namespace HPHP {
 
 IMPLEMENT_THREAD_LOCAL(std::string, s_misc_highlight_default_string);
@@ -146,6 +148,7 @@ void StandardExtension::initMisc() {
     HHVM_FE(sys_getloadavg);
     HHVM_FE(token_get_all);
     HHVM_FE(token_name);
+    HHVM_FE(clock_gettime_monotonic);
     HHVM_FE(hphp_to_string);
     Native::registerConstant<KindOfDouble>(makeStaticString("INF"), k_INF);
     Native::registerConstant<KindOfDouble>(makeStaticString("NAN"), k_NAN);
@@ -737,6 +740,29 @@ String HHVM_FUNCTION(hphp_to_string, const Variant& v) {
   return v.toString();
 }
 
+/*
+ * Access to monotonic clock added by soft-dev for benchmarking.
+ * Not intended for general inclusion in HHVM
+ */
+#ifdef __linux__
+#define ACTUAL_MONOTONIC_CLOCK CLOCK_MONOTONIC_RAW
+#else
+#define ACTUAL_MONOTONIC_CLOCK CLOCK_MONOTONIC
+#endif
+
+double HHVM_FUNCTION(clock_gettime_monotonic) {
+	struct timespec		ts;
+	double			result;
+
+	if ((clock_gettime(ACTUAL_MONOTONIC_CLOCK, &ts)) < 0) {
+		perror("clock_gettime");
+		exit(1);
+	}
+
+	result = ts.tv_sec + ts.tv_nsec * pow(10, -9);
+	return (result);
+}
+
 ///////////////////////////////////////////////////////////////////////////////
 }
 
diff --git a/hphp/runtime/ext/std/ext_std_misc.h b/hphp/runtime/ext/std/ext_std_misc.h
index 5696eee..3b4ab87 100644
--- a/hphp/runtime/ext/std/ext_std_misc.h
+++ b/hphp/runtime/ext/std/ext_std_misc.h
@@ -43,6 +43,7 @@ Variant HHVM_FUNCTION(unpack, const String& format, const String& data);
 Array HHVM_FUNCTION(sys_getloadavg);
 Array HHVM_FUNCTION(token_get_all, const String& source);
 String HHVM_FUNCTION(token_name, int64_t token);
+double HHVM_FUNCTION(clock_gettime_monotonic);
 String HHVM_FUNCTION(hphp_to_string, const Variant& v);
 extern const double k_INF;
 extern const double k_NAN;
diff --git a/hphp/runtime/ext/std/ext_std_misc.php b/hphp/runtime/ext/std/ext_std_misc.php
index 9fa788a..b658f59 100644
--- a/hphp/runtime/ext/std/ext_std_misc.php
+++ b/hphp/runtime/ext/std/ext_std_misc.php
@@ -214,6 +214,9 @@ function token_get_all(string $source): array;
 <<__ParamCoerceModeFalse, __Native>>
 function token_name(int $token): string;
 
+/* Returns the monotonic clock value in seconds.  */
+<<__Native>>
+function clock_gettime_monotonic(): double;
 /* Casts a given value to a string.
  * @param mixed $v - The value being casted to a string.
  * @return string - The result of the string cast.
